{"version":3,"file":"battleship78177dbc8b263673f6b3.bundle.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/Models/Ship.mjs","webpack://battleship/./src/Models/Ships.mjs","webpack://battleship/./src/Models/Player.mjs","webpack://battleship/./src/Models/GameBoard.mjs","webpack://battleship/./src/index.js","webpack://battleship/./src/Controllers/Game.mjs"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const Ship = (name, health) => {\n  let damage = 0;\n  let currentHealth = health;\n\n  const hasSunk = () => damage === health;\n\n  const hit = () => {\n    \n    let msg = '';\n\n    if (!hasSunk()) {\n      damage += 1;\n      currentHealth -= 1;\n      return hasSunk();\n    }\n\n    msg += 'The ship you are trying to hit has already sank.';\n\n    return msg;\n  };\n\n  return {\n    name,\n    get health() {\n      return currentHealth;\n    },\n    get damage() {\n      return damage;\n    },\n    hasSunk,\n    hit,\n  };\n};\n\nexport default Ship;\n","import Ship from './Ship.mjs';\n\nconst carrier = Ship('Carrier', 5);\nconst battleship = Ship('Battleship', 4);\nconst destroyer = Ship('Destroyer', 3);\nconst submarine = Ship('Submarine', 3);\nconst patrolBoat = Ship('Patrol Boat', 2);\n\nexport {carrier,battleship,destroyer,submarine,patrolBoat};","import GameBoard from './GameBoard.mjs';\n\nconst Player = (name = 'Computer') => {\n  const board = GameBoard();\n  const gameBoard = board.createBoard();\n  const showBoard = () => {\n    const playerBoard = document.querySelector('#player-board');\n    const computerBoard = document.querySelector('#computer-board');\n    const size = 10;\n\n    if (name !== 'Computer') {\n      for (let i = 0; i < size; i += 1) {\n        for (let j = 0; j < size; j += 1) {\n          const cell = document.createElement('div');\n          cell.setAttribute('coord', [i, j]);\n          cell.className = 'p-cell';\n          playerBoard.appendChild(cell);\n          if (gameBoard[i][j] === 'water') {\n            cell.className = 'p-cell water';\n            playerBoard.appendChild(cell);\n          }\n          if (gameBoard[i][j] !== 'water') {\n            cell.className = 'p-cell ship';\n            cell.setAttribute('draggable', 'true');\n            cell.style.border = 'none';\n            playerBoard.appendChild(cell);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < size; i += 1) {\n        for (let j = 0; j < size; j += 1) {\n          const cell = document.createElement('div');\n          cell.setAttribute('coord', [i, j]);\n          cell.classList.add('c-cell');\n          computerBoard.appendChild(cell);\n          if (gameBoard[i][j] === 'water') {\n            cell.className = 'c-cell water';\n            computerBoard.appendChild(cell);\n          } else {\n            cell.className = 'c-cell water';\n          }\n        }\n      }\n    }\n\n    return gameBoard;\n  };\n  return { name, board, showBoard };\n};\n\nexport default Player;\n","import {\n  battleship,\n  carrier,\n  destroyer,\n  patrolBoat,\n  submarine,\n} from './Ships.mjs';\n\nconst GameBoard = () => {\n  const board = [];\n  const size = 10;\n\n  const createBoard = () => {\n    for (let i = 0; i < size; i += 1) {\n      board[i] = [];\n      for (let j = 0; j < size; j += 1) {\n        board[i][j] = 'water';\n      }\n    }\n    return board;\n  };\n  const isCellValid = (x, y) => x >= 0 && x < size && y >= 0 && y < size;\n  const canPlaceShip = (length, row, col, dir) => {\n    const dx = dir === 'horizontal' ? 1 : 0;\n    const dy = dir === 'vertical' ? 1 : 0;\n\n    for (let i = 0; i < length; i += 1) {\n      const x = col + i * dx;\n      const y = row + i * dy;\n\n      if (!isCellValid(x, y)) {\n        return false;\n      }\n\n      for (let adjX = x - 1; adjX <= x + 1; adjX += 1) {\n        for (let adjY = y - 1; adjY <= y + 1; adjY += 1) {\n          if (\n            adjX >= 0 &&\n            adjX < size &&\n            adjY >= 0 &&\n            adjY < size &&\n            board[adjY][adjX] !== 'water'\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  const placeShip = (ship, row, col, dir) => {\n    const { health } = ship;\n\n    if (!canPlaceShip(health, row, col, dir)) {\n      return false;\n    }\n\n    const dx = dir === 'horizontal' ? 1 : 0;\n    const dy = dir === 'vertical' ? 1 : 0;\n\n    for (let i = 0; i < health; i += 1) {\n      const x = col + i * dx;\n      const y = row + i * dy;\n      board[y][x] = ship;\n    }\n\n    return true;\n  };\n\n  const receiveAttack = (row, col) => {\n    const cell = board[row][col];\n    if (cell !== null && typeof cell.hit === 'function') {\n      return cell.hit(); // If returns true, the ship was sunk\n    }\n\n    board[row][col] = 'M';\n    return 'Missed'; // Otherwise the attack failed and is marked\n  };\n\n  const allShipsSunk = () => {\n    if (\n      carrier.hasSunk() &&\n      battleship.hasSunk() &&\n      destroyer.hasSunk() &&\n      submarine.hasSunk() &&\n      patrolBoat.hasSunk()\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    createBoard,\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    get board() {\n      return board;\n    },\n  };\n};\n\nexport default GameBoard;\n","\nimport Game from './Controllers/Game.mjs';\n\nimport './css/style.css';\nimport footerLogo from './img/ghlogo.png';\n\nconst ghLogo = document.querySelector('.gh-logo');\nghLogo.src = footerLogo;\n\nGame();\n","import Player from '../Models/Player.mjs';\nimport { battleship, carrier, destroyer, patrolBoat, submarine } from '../Models/Ships.mjs';\n\nconst Game = () => {\n  const player = Player('Player 1');\n  const computer = Player();\n  \n  player.board.createBoard();\n  computer.board.createBoard();\n  player.board.placeShip(carrier,0,1,'horizontal'); \n  player.board.placeShip(battleship,5,6,'vertical');\n  player.board.placeShip(destroyer,0,7,'vertical');\n  player.board.placeShip(submarine,2,3,'horizontal');\n  player.board.placeShip(patrolBoat,6,4,'vertical');\n\n  computer.board.placeShip(carrier,1,0,'vertical'); \n  computer.board.placeShip(battleship,4,4,'vertical');\n  computer.board.placeShip(destroyer,0,5,'horizontal');\n  computer.board.placeShip(submarine,7,1,'vertical');\n  computer.board.placeShip(patrolBoat,6,7,'horizontal');\n  computer.board.receiveAttack(1,0);\n  computer.board.receiveAttack(2,4);\n  console.table(player.showBoard());\n  console.table(computer.showBoard());\n\n  return {player,computer};\n};\n\nexport default Game;"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","Ship","name","health","damage","currentHealth","hasSunk","hit","msg","carrier","battleship","destroyer","submarine","patrolBoat","arguments","undefined","board","GameBoard","size","isCellValid","x","y","createBoard","j","placeShip","ship","row","col","dir","canPlaceShip","dx","dy","adjX","adjY","receiveAttack","cell","allShipsSunk","gameBoard","showBoard","playerBoard","querySelector","computerBoard","createElement","setAttribute","className","appendChild","style","border","classList","add","footerLogo","Game","player","Player","computer","console","table"],"sourceRoot":""}