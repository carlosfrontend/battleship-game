{"version":3,"file":"battleshipb21e34f3719b2e19a917.bundle.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/Models/Ship.mjs","webpack://battleship/./src/Models/Ships.mjs","webpack://battleship/./src/Models/Player.mjs","webpack://battleship/./src/Models/GameBoard.mjs","webpack://battleship/./src/index.js","webpack://battleship/./src/Controllers/Game.mjs"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const Ship = (name, health) => {\n  let damage = 0;\n  let currentHealth = health;\n\n  const hasSunk = () => damage === health;\n\n  const hit = () => {\n    \n    let msg = '';\n\n    if (!hasSunk()) {\n      damage += 1;\n      currentHealth -= 1;\n      return hasSunk();\n    }\n\n    msg += 'The ship you are trying to hit has already sank.';\n\n    return msg;\n  };\n\n  return {\n    name,\n    get health() {\n      return currentHealth;\n    },\n    get damage() {\n      return damage;\n    },\n    hasSunk,\n    hit,\n  };\n};\n\nexport default Ship;\n","import Ship from './Ship.mjs';\n\nconst carrierPlayer = Ship('Carrier', 5);\nconst battleshipPlayer = Ship('Battleship', 4);\nconst destroyerPlayer = Ship('Destroyer', 3);\nconst submarinePlayer = Ship('Submarine', 3);\nconst patrolBoatPlayer = Ship('Patrol Boat', 2);\n\nconst carrierComputer = Ship('Carrier', 5);\nconst battleshipComputer = Ship('Battleship', 4);\nconst destroyerComputer = Ship('Destroyer', 3);\nconst submarineComputer = Ship('Submarine', 3);\nconst patrolBoatComputer = Ship('Patrol Boat', 2);\n\nexport {carrierPlayer, carrierComputer,battleshipPlayer,battleshipComputer,destroyerPlayer,destroyerComputer,submarinePlayer,submarineComputer,patrolBoatPlayer,patrolBoatComputer};","import GameBoard from './GameBoard.mjs';\n\nconst Player = (name = 'Computer') => {\n  const board = GameBoard();\n  const createGameBoard = () => board.createBoard();\n\n  return { name, board, createGameBoard };\n};\n\nexport default Player;\n","import {carrierPlayer, carrierComputer,battleshipPlayer,battleshipComputer,destroyerPlayer,destroyerComputer,submarinePlayer,submarineComputer,patrolBoatPlayer,patrolBoatComputer} from './Ships.mjs';\n\nconst GameBoard = () => {\n  const board = [];\n  const size = 10;\n\n  const createBoard = () => {\n    for (let i = 0; i < size; i += 1) {\n      board[i] = [];\n      for (let j = 0; j < size; j += 1) {\n        board[i][j] = 'water';\n      }\n    }\n    return board;\n  };\n  const isCellValid = (x, y) => x >= 0 && x < size && y >= 0 && y < size;\n  const canPlaceShip = (length, row, col, dir) => {\n    const dx = dir === 'horizontal' ? 1 : 0;\n    const dy = dir === 'vertical' ? 1 : 0;\n\n    for (let i = 0; i < length; i += 1) {\n      const x = col + i * dx;\n      const y = row + i * dy;\n\n      if (!isCellValid(x, y)) {\n        return false;\n      }\n\n      for (let adjX = x - 1; adjX <= x + 1; adjX += 1) {\n        for (let adjY = y - 1; adjY <= y + 1; adjY += 1) {\n          if (\n            adjX >= 0 &&\n            adjX < size &&\n            adjY >= 0 &&\n            adjY < size &&\n            board[adjY][adjX] !== 'water'\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  const placeShip = (ship, row, col, dir) => {\n    const { health } = ship;\n\n    if (!canPlaceShip(health, row, col, dir)) {\n      return false;\n    }\n\n    const dx = dir === 'horizontal' ? 1 : 0;\n    const dy = dir === 'vertical' ? 1 : 0;\n\n    for (let i = 0; i < health; i += 1) {\n      const x = col + i * dx;\n      const y = row + i * dy;\n      board[y][x] = ship;\n    }\n\n    return true;\n  };\n\n  const receiveAttack = (row, col) => {\n    const cell = board[row][col];\n    if (cell !== null && typeof cell.hit === 'function') {\n      return cell.hit(); // If returns true, the ship was sunk\n    }\n\n    board[row][col] = 'M';\n    return 'Missed'; // Otherwise the attack failed and is marked\n  };\n\n  const allShipsSunk = () => {\n    if (\n      (carrierPlayer.hasSunk() &&\n      battleshipPlayer.hasSunk() &&\n      destroyerPlayer.hasSunk() &&\n      submarinePlayer.hasSunk() &&\n      patrolBoatPlayer.hasSunk()) || (carrierComputer.hasSunk &&battleshipComputer.hasSunk() && destroyerComputer.hasSunk() && submarineComputer.hasSunk() && patrolBoatComputer.hasSunk())\n    ) {\n      return true;\n    }\n  \n    \n    return false;\n    \n  };\n\n  return {\n    createBoard,\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    get board() {\n      return board;\n    },\n  };\n};\n\nexport default GameBoard;\n","import Game from './Controllers/Game.mjs';\nimport './css/style.css';\nimport footerLogo from './img/ghlogo.png';\n\n\nconst ghLogo = document.querySelector('.gh-logo');\nghLogo.src = footerLogo;\n\nGame();\n","import Player from '../Models/Player.mjs';\nimport {\n  carrierPlayer,\n  carrierComputer,\n  battleshipPlayer,\n  battleshipComputer,\n  destroyerPlayer,\n  destroyerComputer,\n  submarinePlayer,\n  submarineComputer,\n  patrolBoatPlayer,\n  patrolBoatComputer,\n} from '../Models/Ships.mjs';\nimport waterIcon from '../img/water.svg';\nimport shipIcon from '../img/ship.svg';\nimport missedIcon from '../img/shot.svg';\nimport touchedIcon from '../img/impact.svg';\n\nconst Game = () => {\n  const playerBoardDom = document.querySelector('#player-board');\n  const computerBoardDom = document.querySelector('#computer-board');\n  const player = Player('Player');\n  const computer = Player();\n  const playerBoard = player.createGameBoard();\n  const computerBoard = computer.createGameBoard();\n  const playerData = [];\n  const computerData = [];\n  const coords = [];\n  let playerTurn = true;\n  let computerTurn = true;\n  const message = document.querySelector('.message');\n\n  const resetDom = () => {\n    playerBoardDom.innerHTML = '';\n    computerBoardDom.innerHTML = '';\n    for (let x = 0; x < 10; x += 1) {\n      for (let y = 0; y < 10; y += 1) {\n        playerData.push(playerBoard[x][y]);\n        computerData.push(computerBoard[x][y]);\n        coords.push([x, y]);\n      }\n    }\n\n    for (let i = 0; i < 100; i += 1) {\n      const pCell = document.createElement('button');\n      const cCell = document.createElement('button');\n\n      if (playerData[i] === 'water') {\n        pCell.classList.add('water');\n        pCell.style.backgroundImage = ` url(${waterIcon})`;\n      }\n\n      if (typeof playerData[i] === 'object') {\n        pCell.classList.add('water');\n        pCell.style.backgroundImage = ` url(${shipIcon})`;\n      }\n\n      if (playerData[i] === 'M') {\n        pCell.classList.add('water');\n        pCell.style.backgroundImage = `url(${waterIcon})`;\n      }\n\n      if (computerData[i] === 'water') {\n        cCell.classList.add('water');\n        cCell.style.backgroundImage = `url(${waterIcon})`;\n      }\n\n      if (typeof computerData[i] === 'object') {\n        cCell.classList.add('water');\n        cCell.style.backgroundImage = `url(${waterIcon})`;\n      }\n\n      if (computerData[i] === 'M') {\n        cCell.classList.add('water');\n        cCell.style.backgroundImage = `url(${waterIcon})`;\n      }\n\n      playerBoardDom.append(pCell);\n      computerBoardDom.append(cCell);\n      [...playerBoardDom.children][i].setAttribute('x', coords[i][0]);\n      [...playerBoardDom.children][i].setAttribute('y', coords[i][1]);\n      [...computerBoardDom.children][i].setAttribute('x', coords[i][0]);\n      [...computerBoardDom.children][i].setAttribute('y', coords[i][1]);\n    }\n  };\n\n  // Function to generate a random number between 0 and 100 (both included)\n  function getRandomNum() {\n    return Math.floor(Math.random() * 100);\n  }\n\n  // Create a set to store unique positions\n  const positionsSet = new Set();\n\n  // Generate random positions until we have 100 unique ones\n  while (positionsSet.size < 100) {\n    const pos = getRandomNum();\n    positionsSet.add(`${pos}`);\n  }\n\n  // Convert the set to a numbers array\n  const positions = Array.from(positionsSet).map((num) => +num);\n\n  player.board.placeShip(carrierPlayer, 0, 0, 'horizontal');\n  player.board.placeShip(battleshipPlayer, 4, 9, 'vertical');\n  player.board.placeShip(destroyerPlayer, 2, 6, 'vertical');\n  player.board.placeShip(submarinePlayer, 9, 2, 'horizontal');\n  player.board.placeShip(patrolBoatPlayer, 4, 3, 'vertical');\n\n  computer.board.placeShip(carrierComputer, 1, 3, 'horizontal');\n  computer.board.placeShip(battleshipComputer, 3, 9, 'vertical');\n  computer.board.placeShip(destroyerComputer, 6, 6, 'vertical');\n  computer.board.placeShip(submarineComputer, 5, 2, 'horizontal');\n  computer.board.placeShip(patrolBoatComputer, 2, 0, 'vertical');\n\n  const computerAttackHandler = (e) => {\n    e.stopPropagation();\n    if (e.target.closest('.water')) {\n      const x = +e.target.getAttribute('x');\n      const y = +e.target.getAttribute('y');\n      player.board.receiveAttack(x, y);\n      if (playerBoard[x][y] === 'M') {\n        computerTurn = false;\n        e.target.style.backgroundImage = '';\n        e.target.style.backgroundImage = `url(${missedIcon})`;\n        e.target.disabled = true;\n      } else {\n        [...playerBoardDom.children][positions.shift()].click();\n        computerTurn = true;\n        e.target.style.backgroundImage = '';\n        e.target.style.backgroundImage = `url(${touchedIcon})`;\n        e.target.disabled = true;\n      }\n\n      if (computerTurn) {\n        playerBoardDom.addEventListener('click', computerAttackHandler);\n      } else {\n        playerBoardDom.removeEventListener('click', computerAttackHandler);\n        // eslint-disable-next-line no-use-before-define\n        computerBoardDom.addEventListener('click', playerAttackHandler);\n      }\n    }\n    if (player.board.allShipsSunk()) {\n      message.textContent = `${computer.name} Wins!`;\n      console.table(playerBoard);\n    }\n  };\n\n  const playerAttackHandler = (e) => {\n    e.stopPropagation();\n    if (e.target.closest('.water')) {\n      const x = +e.target.getAttribute('x');\n      const y = +e.target.getAttribute('y');\n      computer.board.receiveAttack(x, y);\n      if (computerBoard[x][y] === 'M') {\n        playerTurn = false;\n        e.target.style.backgroundImage = '';\n        e.target.style.backgroundImage = ` url(${missedIcon})`;\n        e.target.disabled = true;\n      } else {\n        playerTurn = true;\n        e.target.style.backgroundImage = '';\n        e.target.style.backgroundImage = ` url(${touchedIcon})`;\n        e.target.disabled = true;\n        if (computer.board.allShipsSunk()) {\n          message.textContent = `${player.name} Wins!`;\n          console.table(computerBoard);\n        }\n        return;\n      }\n\n      if (playerTurn) {\n        computerBoardDom.addEventListener('click', playerAttackHandler);\n      } else {\n        computerBoardDom.removeEventListener('click', playerAttackHandler);\n        playerBoardDom.addEventListener('click', computerAttackHandler);\n        [...playerBoardDom.children][positions.shift()].click();\n      }\n    }\n  };\n\n  resetDom();\n  computerBoardDom.addEventListener('click', playerAttackHandler);\n};\n\nexport default Game;\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","Ship","name","health","damage","currentHealth","hasSunk","hit","msg","carrierPlayer","battleshipPlayer","destroyerPlayer","submarinePlayer","patrolBoatPlayer","carrierComputer","battleshipComputer","destroyerComputer","submarineComputer","patrolBoatComputer","arguments","undefined","board","GameBoard","size","isCellValid","x","y","createBoard","j","placeShip","ship","row","col","dir","canPlaceShip","dx","dy","adjX","adjY","receiveAttack","cell","allShipsSunk","createGameBoard","querySelector","footerLogo","Game","playerBoardDom","computerBoardDom","player","Player","computer","playerBoard","computerBoard","playerData","computerData","coords","playerTurn","computerTurn","message","positionsSet","Set","pos","Math","floor","random","add","positions","Array","from","map","num","computerAttackHandler","stopPropagation","target","closest","getAttribute","style","backgroundImage","missedIcon","disabled","children","shift","click","touchedIcon","addEventListener","removeEventListener","playerAttackHandler","textContent","console","table","resetDom","innerHTML","push","pCell","createElement","cCell","classList","waterIcon","shipIcon","append","setAttribute"],"sourceRoot":""}