{"version":3,"file":"battleship9b0070658d88b8fb3bdb.bundle.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/Models/Ship.mjs","webpack://battleship/./src/Models/Ships.mjs","webpack://battleship/./src/Dom/Dom.mjs","webpack://battleship/./src/Models/Player.mjs","webpack://battleship/./src/Models/GameBoard.mjs","webpack://battleship/./src/index.js","webpack://battleship/./src/Controllers/Game.mjs"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const Ship = (name, health) => {\n  let damage = 0;\n  let currentHealth = health;\n\n  const hasSunk = () => damage === health;\n\n  const hit = () => {\n    \n    let msg = '';\n\n    if (!hasSunk()) {\n      damage += 1;\n      currentHealth -= 1;\n      return hasSunk();\n    }\n\n    msg += 'The ship you are trying to hit has already sank.';\n\n    return msg;\n  };\n\n  return {\n    name,\n    get health() {\n      return currentHealth;\n    },\n    get damage() {\n      return damage;\n    },\n    hasSunk,\n    hit,\n  };\n};\n\nexport default Ship;\n","import Ship from './Ship.mjs';\n\nconst carrier = Ship('Carrier', 5);\nconst battleship = Ship('Battleship', 4);\nconst destroyer = Ship('Destroyer', 3);\nconst submarine = Ship('Submarine', 3);\nconst patrolBoat = Ship('Patrol Boat', 2);\n\nexport {carrier,battleship,destroyer,submarine,patrolBoat};","import waterIcon from '../img/water.svg';\nimport shipIcon from '../img/ship.svg';\n\nimport {\n  battleship,\n  carrier,\n  destroyer,\n  patrolBoat,\n  submarine,\n} from '../Models/Ships.mjs';\n\nconst Dom = () => {\n  const boardSize = 100;\n  const size = 10;\n  const playerBoardDom = document.querySelector('#player-board');\n  const computerBoardDom = document.querySelector('#computer-board');\n  const playerTitle = document.querySelector('.player-title');\n  const computerTitle = document.querySelector('.computer-title');\n  const coords = [];\n\n  for(let i = 0; i < size; i+=1){\n    for(let j = 0; j < size; j+=1){\n      coords.push([i, j]);\n    }\n  }\n\n  const drawBoards = () => {\n    for (let i = 0; i < boardSize; i += 1) {\n      const playerCell = document.createElement('button');\n      const computerCell = document.createElement('button');\n      playerCell.classList.add('water');\n      const cellImgPlayer = document.createElement('img');\n      const cellImgComputer = document.createElement('img');\n      cellImgPlayer.src = waterIcon;\n      cellImgComputer.src = waterIcon;\n      playerCell.append(cellImgPlayer);\n      computerCell.classList.add('water');\n      computerCell.append(cellImgComputer);\n      playerBoardDom.append(playerCell);\n      computerBoardDom.append(computerCell);\n    }\n  };\n  // Shows the players titles\n  const showPlayerTitles = (player, computer) => {\n    playerTitle.textContent = player;\n    computerTitle.textContent = computer;\n  };\n\n\n  // Place the player ships\n  const placePlayerShips = (player) => {\n    player.board.placeShip(carrier, 0, 0, 'vertical');\n    player.board.placeShip(battleship, 4, 2, 'horizontal');\n    player.board.placeShip(destroyer, 7, 8, 'vertical');\n    player.board.placeShip(submarine, 0, 7, 'horizontal');\n    player.board.placeShip(patrolBoat, 8, 1, 'vertical');   \n  };\n\n  // Place the computer ships\n  const placeComputerShips = (computer) => {\n    computer.board.placeShip(carrier, 9, 5, 'horizontal');\n    computer.board.placeShip(battleship, 3, 0, 'vertical');\n    computer.board.placeShip(destroyer, 2, 7, 'horizontal');\n    computer.board.placeShip(submarine, 4, 3, 'horizontal');\n    computer.board.placeShip(patrolBoat, 0, 3, 'horizontal');\n  };\n\n  const showPlayerBoard = (playerBoard) => {\n    playerBoardDom.innerHTML = '';\n    \n    const dataArray = [];\n\n    for (let i = 0; i < 10; i += 1) {\n      for (let j = 0; j < 10; j += 1) {\n        dataArray.push(playerBoard[i][j]);\n      }\n    }\n\n    for (let i = 0; i < boardSize; i += 1) {\n      const playerCell = document.createElement('button');\n      if (dataArray[i] === 'water') {\n        playerBoardDom.append(playerCell);\n      } else {\n        playerBoardDom.append(playerCell);\n      }\n    }\n\n    for (let i = 0; i < boardSize; i += 1) {\n      if (dataArray[i] === 'water') {\n        const water = document.createElement('img');\n        water.src = waterIcon;\n        [...playerBoardDom.children][i].classList.add('water');\n        [...playerBoardDom.children][i].append(water);\n      } else {\n        const ship = document.createElement('img');\n        ship.src = shipIcon;\n        [...playerBoardDom.children][i].classList.add('water');\n        [...playerBoardDom.children][i].append(ship);\n      }\n    }\n    const playerImages = document.querySelectorAll('#player-board>button>img');\n\n    for(let i = 0; i < boardSize; i+=1){\n      playerImages[i].setAttribute('x', coords[i][0]);\n      playerImages[i].setAttribute('y', coords[i][1]);\n    }\n  };\n\n  const showComputerBoard = (computerBoard) => {\n    computerBoardDom.innerHTML = '';\n    \n    const dataArray = [];\n\n    for (let i = 0; i < 10; i += 1) {\n      for (let j = 0; j < 10; j += 1) {\n        dataArray.push(computerBoard[i][j]);\n      }\n    }\n\n    for (let i = 0; i < boardSize; i += 1) {\n      const computerCell = document.createElement('button');\n      if (dataArray[i] === 'water') {\n        computerBoardDom.append(computerCell);\n      } else {\n        computerBoardDom.append(computerCell);\n      }\n    }\n\n    for (let i = 0; i < boardSize; i += 1) {\n      if (dataArray[i] === 'water') {\n        const water = document.createElement('img');\n        water.src = waterIcon;\n        [...computerBoardDom.children][i].classList.add('water');\n        [...computerBoardDom.children][i].append(water);\n      } else {\n        const ship = document.createElement('img');\n        ship.src = waterIcon;\n        [...computerBoardDom.children][i].classList.add('water');\n        [...computerBoardDom.children][i].append(ship);\n      }\n    }\n    const computerImages = document.querySelectorAll('#computer-board>button>img');\n\n    for(let i = 0; i < boardSize; i+=1){\n      computerImages[i].setAttribute('x', coords[i][0]);\n      computerImages[i].setAttribute('y', coords[i][1]);\n    }\n  };\n\n\n  return {\n    drawBoards,\n    showPlayerTitles,\n    placePlayerShips,\n    placeComputerShips,\n    showPlayerBoard,\n    showComputerBoard\n  };\n};\n\nexport default Dom;\n","import GameBoard from './GameBoard.mjs';\n\nconst Player = (name = 'Computer') => {\n  const board = GameBoard();\n  const createGameBoard = () => board.createBoard();\n\n  return { name, board, createGameBoard };\n};\n\nexport default Player;\n","import {\n  battleship,\n  carrier,\n  destroyer,\n  patrolBoat,\n  submarine,\n} from './Ships.mjs';\n\nconst GameBoard = () => {\n  const board = [];\n  const size = 10;\n\n  const createBoard = () => {\n    for (let i = 0; i < size; i += 1) {\n      board[i] = [];\n      for (let j = 0; j < size; j += 1) {\n        board[i][j] = 'water';\n      }\n    }\n    return board;\n  };\n  const isCellValid = (x, y) => x >= 0 && x < size && y >= 0 && y < size;\n  const canPlaceShip = (length, row, col, dir) => {\n    const dx = dir === 'horizontal' ? 1 : 0;\n    const dy = dir === 'vertical' ? 1 : 0;\n\n    for (let i = 0; i < length; i += 1) {\n      const x = col + i * dx;\n      const y = row + i * dy;\n\n      if (!isCellValid(x, y)) {\n        return false;\n      }\n\n      for (let adjX = x - 1; adjX <= x + 1; adjX += 1) {\n        for (let adjY = y - 1; adjY <= y + 1; adjY += 1) {\n          if (\n            adjX >= 0 &&\n            adjX < size &&\n            adjY >= 0 &&\n            adjY < size &&\n            board[adjY][adjX] !== 'water'\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  const placeShip = (ship, row, col, dir) => {\n    const { health } = ship;\n\n    if (!canPlaceShip(health, row, col, dir)) {\n      return false;\n    }\n\n    const dx = dir === 'horizontal' ? 1 : 0;\n    const dy = dir === 'vertical' ? 1 : 0;\n\n    for (let i = 0; i < health; i += 1) {\n      const x = col + i * dx;\n      const y = row + i * dy;\n      board[y][x] = ship;\n    }\n\n    return true;\n  };\n\n  const receiveAttack = (row, col) => {\n    const cell = board[row][col];\n    if (cell !== null && typeof cell.hit === 'function') {\n      return cell.hit(); // If returns true, the ship was sunk\n    }\n\n    board[row][col] = 'M';\n    return 'Missed'; // Otherwise the attack failed and is marked\n  };\n\n  const allShipsSunk = () => {\n    if (\n      carrier.hasSunk() &&\n      battleship.hasSunk() &&\n      destroyer.hasSunk() &&\n      submarine.hasSunk() &&\n      patrolBoat.hasSunk()\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    createBoard,\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    get board() {\n      return board;\n    },\n  };\n};\n\nexport default GameBoard;\n","import Game from './Controllers/Game.mjs';\nimport './css/style.css';\nimport footerLogo from './img/ghlogo.png';\n\nconst ghLogo = document.querySelector('.gh-logo');\nghLogo.src = footerLogo;\n\nGame();","import Dom from '../Dom/Dom.mjs';\nimport Player from '../Models/Player.mjs';\nimport missedIcon from '../img/shot.svg';\nimport impactIcon from '../img/impact.svg';\n\nconst Game = () => {\n  const computerBoardDom = document.querySelector('#computer-board');\n  const playerBoardDom = document.querySelector('#player-board');\n  const message = document.querySelector('.message');\n\n  // Creates the players\n  const player = Player('Player');\n  const computer = Player();\n\n  // Create the boards\n  const playerBoard = player.createGameBoard();\n  const computerBoard = computer.createGameBoard();\n\n  // Shows the player titles\n  Dom().showPlayerTitles(player.name, computer.name);\n\n  // Draw void boards\n  Dom().drawBoards();\n\n  // Place the ships\n  Dom().placePlayerShips(player);\n\n  // Shows the player board\n  Dom().showPlayerBoard(playerBoard);\n\n  // Place the computer ships\n  Dom().placeComputerShips(computer);\n\n  // Shows the computer board\n  Dom().showComputerBoard(computerBoard);\n\n  // Function to generate a random number between 0 and 100 (both included)\n  function getRandomNum() {\n    return Math.floor(Math.random() * 100);\n  }\n\n  // Create a set to store unique positions\n  const positionsSet = new Set();\n\n  // Generate random positions until we have 100 unique ones\n  while (positionsSet.size < 100) {\n    const pos = getRandomNum();\n    positionsSet.add(`${pos}`);\n  }\n\n  // Convert the set to a numbers array\n  const positions = Array.from(positionsSet).map(num => +num);\n\n\n  const computerAttack = () => {\n \n    \n    const computerHandler = (e) => {\n      e.stopImmediatePropagation();\n      if (e.target.closest('img')) {\n        const cell = e.target;\n        const attack = player.board.receiveAttack(+cell.getAttribute('x'), +cell.getAttribute('y'));\n\n        if(attack === 'Missed'){\n          cell.parentNode.disabled = true;\n          cell.src = missedIcon;\n          playerBoardDom.removeEventListener('click', computerHandler);\n          message.textContent = `${player.name} turn`;\n          // eslint-disable-next-line no-use-before-define\n          playerAttack();\n        }\n\n        if (attack === false) {\n          cell.parentNode.disabled = true;\n          // positions.shift();\n          cell.src = impactIcon;\n          playerBoardDom.addEventListener('click', computerHandler, {once: true} );\n          setTimeout(() => {\n            [...playerBoardDom.children][positions.shift()].firstChild.click();\n          }, 800);\n\n        }\n        if (attack === true) {\n          cell.parentNode.disabled = true;\n          // positions.shift();\n          cell.src = impactIcon;\n          playerBoardDom.addEventListener('click', computerHandler, {once: true} );\n          setTimeout(() => {\n            [...playerBoardDom.children][positions.shift()].firstChild.click();\n          }, 800);\n        }\n\n        if (attack === 'The ship you are trying to hit has already sank.') {\n          cell.parentNode.disabled = true;\n          // positions.shift();\n          cell.src = impactIcon;\n          playerBoardDom.addEventListener('click', computerHandler, {once: true} );\n          setTimeout(() => {\n            [...playerBoardDom.children][positions.shift()].firstChild.click();\n          }, 800);\n        }\n\n        console.log(cell);\n        console.log(player);\n        console.table(playerBoard);\n        if(player.board.allShipsSunk()){\n          message.textContent = `${computer.name} Wins!`;\n        }\n      }\n    };\n    \n    playerBoardDom.addEventListener('click', computerHandler, {once: true});\n    [...playerBoardDom.children][positions.shift()].firstChild.click();\n  };\n\n  const playerAttack = () => {\n    const playerHandler = (e) => {\n      e.stopImmediatePropagation();\n      if (e.target.closest('img')) {\n        const cell = e.target;\n        const x = +cell.getAttribute('x');\n        const y = +cell.getAttribute('y');\n        const attack = computer.board.receiveAttack(x, y);\n        if (attack === 'Missed') {\n          cell.src = missedIcon;\n          cell.parentNode.disabled = true;\n          // Stop interaction\n          computerBoardDom.removeEventListener('click', playerHandler);\n          // Change turn to the computer\n          message.textContent = `${computer.name} turn`;\n          setTimeout(() => {\n            computerAttack();\n          }, 800);\n        }\n        if (attack === false || attack === true) {\n          cell.parentNode.disabled = true;\n          cell.src = impactIcon;\n        }\n\n        if(attack === 'The ship you are trying to hit has already sank.'){\n          cell.parentNode.disabled = true;\n          cell.src = impactIcon;\n        }\n\n        console.log(cell);\n        console.log(computer);\n        console.table(computerBoard);\n        if(computer.board.allShipsSunk()){\n          message.textContent = `${player.name} Wins !`;\n        }\n      }\n    };\n    \n    computerBoardDom.addEventListener('click', playerHandler);\n  };\n\n  // The Player starts the game\n  message.textContent = `${player.name} turn`;\n  playerAttack();\n};\n\nexport default Game;\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","Ship","name","health","damage","currentHealth","hasSunk","hit","msg","carrier","battleship","destroyer","submarine","patrolBoat","Dom","boardSize","playerBoardDom","querySelector","computerBoardDom","playerTitle","computerTitle","coords","j","push","drawBoards","playerCell","createElement","computerCell","classList","add","cellImgPlayer","cellImgComputer","waterIcon","append","showPlayerTitles","player","computer","textContent","placePlayerShips","board","placeShip","placeComputerShips","showPlayerBoard","playerBoard","innerHTML","dataArray","water","children","ship","shipIcon","playerImages","querySelectorAll","setAttribute","showComputerBoard","computerBoard","computerImages","arguments","undefined","GameBoard","size","isCellValid","x","y","createBoard","row","col","dir","canPlaceShip","dx","dy","adjX","adjY","receiveAttack","cell","allShipsSunk","createGameBoard","footerLogo","Game","message","Player","positionsSet","Set","pos","Math","floor","random","positions","Array","from","map","num","playerAttack","playerHandler","stopImmediatePropagation","target","closest","getAttribute","attack","missedIcon","parentNode","disabled","removeEventListener","setTimeout","computerAttack","computerHandler","impactIcon","addEventListener","once","shift","firstChild","click","console","log","table"],"sourceRoot":""}